{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Importing libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "fT4ffR6H8x9z"
      },
      "outputs": [],
      "source": [
        "import torch, gc\n",
        "import os\n",
        "import torchvision\n",
        "import tarfile\n",
        "import torch.nn as nn\n",
        "import numpy as np\n",
        "import torch.nn.functional as F\n",
        "from torchvision.datasets import ImageFolder\n",
        "from torch.utils.data import DataLoader\n",
        "import torchvision.transforms as tt\n",
        "from torch.utils.data import random_split\n",
        "from torchvision.utils import make_grid\n",
        "import matplotlib\n",
        "from torchvision.datasets.utils import download_url\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Normalizing stats"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KSWhlV178x93"
      },
      "outputs": [],
      "source": [
        "# stats = ((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Transormations added to normalize and flip images"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "iOK06f5O8x93"
      },
      "outputs": [],
      "source": [
        "train_tfms = tt.Compose([tt.Resize(64),\n",
        "                        tt.RandomHorizontalFlip(),\n",
        "                        tt.RandomVerticalFlip(),\n",
        "                        \n",
        "                        \n",
        "                        tt.ToTensor(),\n",
        "                        ])\n",
        "test_tfms = tt.Compose([tt.ToTensor()])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Creating training dataset and test dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "iPFCoLDL8x94"
      },
      "outputs": [],
      "source": [
        "train_ds = ImageFolder('data/train1',train_tfms)\n",
        "test_ds = ImageFolder('data/test1',test_tfms)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Classes\n",
        "##### 1)Plain\n",
        "##### 2)Potholes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['normal', 'potholes']"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_ds.classes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "7EbMp8Ii8x94"
      },
      "outputs": [],
      "source": [
        "batch_size = 32"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Specifying dataloaders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uksusdew8x94",
        "outputId": "c29d100d-a783-47c7-adf2-4147860fff3f"
      },
      "outputs": [],
      "source": [
        "train_dl = DataLoader(train_ds,batch_size,shuffle=True,num_workers=3,pin_memory=True)\n",
        "test_dl = DataLoader(test_ds,batch_size*2,num_workers=3,pin_memory=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##### Functions for denormalization and checking data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "XPmpGra88x95"
      },
      "outputs": [],
      "source": [
        "# def denormalize(images,means,stds):\n",
        "#     means = torch.tensor(means).reshape(1,3,1,1)\n",
        "#     stds = torch.tensor(stds).reshape(1,3,1,1)\n",
        "#     return images*stds+means\n",
        "\n",
        "def show_batch(dl):\n",
        "    for images,labels in dl:\n",
        "        fig, ax = plt.subplots(figsize=(12,12))\n",
        "        ax.set_xticks([]);ax.set_yticks([])\n",
        "        \n",
        "        ax.imshow(make_grid(images[:64], nrow=8).permute(1,2,0).clamp(0,1))\n",
        "        break"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "5v3ip-6B8x96",
        "outputId": "0a8956a1-4d6b-4a1c-ab92-81304b37e84b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 864x864 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "show_batch(train_dl)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Using GPU for computation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "BKMh5esg8x97"
      },
      "outputs": [],
      "source": [
        "def get_default_device():\n",
        "    \"\"\"Pick GPU if available, else CPU\"\"\"\n",
        "    if torch.cuda.is_available():\n",
        "        return torch.device('cuda')\n",
        "    else:\n",
        "        return torch.device('cpu')\n",
        "    \n",
        "def to_device(data, device):\n",
        "    \"\"\"Move tensor(s) to chosen device\"\"\"\n",
        "    if isinstance(data, (list,tuple)):\n",
        "        return [to_device(x, device) for x in data]\n",
        "    return data.to(device, non_blocking=True)\n",
        "\n",
        "class DeviceDataLoader():\n",
        "    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n",
        "    def __init__(self, dl, device):\n",
        "        self.dl = dl\n",
        "        self.device = device\n",
        "        \n",
        "    def __iter__(self):\n",
        "        \"\"\"Yield a batch of data after moving it to device\"\"\"\n",
        "        for b in self.dl: \n",
        "            yield to_device(b, self.device)\n",
        "\n",
        "    def __len__(self):\n",
        "        \"\"\"Number of batches\"\"\"\n",
        "        return len(self.dl)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yivZqLTF8x98",
        "outputId": "8ef9a688-f510-43db-d94b-469555be1831"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "device(type='cuda')"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "device = get_default_device()\n",
        "device"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Loading dataloader to GPU"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "qASSU9MD8x98"
      },
      "outputs": [],
      "source": [
        "train_dl = DeviceDataLoader(train_dl, device)\n",
        "test_dl = DeviceDataLoader(test_dl, device)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Functions for evaluation of diffrent parameters like accuracy and loss."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "SAO4Fd0cdf0u"
      },
      "outputs": [],
      "source": [
        "def accuracy(outputs, labels):\n",
        "    _, preds = torch.max(outputs, dim=1)\n",
        "    return torch.tensor(torch.sum(preds == labels).item() / len(preds))\n",
        "\n",
        "class ImageClassificationBase(nn.Module):\n",
        "    def training_step(self, batch):\n",
        "        images, labels = batch \n",
        "        out = self(images)                  # Generate predictions\n",
        "        loss = F.cross_entropy(out, labels) # Calculate loss\n",
        "        return loss\n",
        "    \n",
        "    def validation_step(self, batch):\n",
        "        images, labels = batch \n",
        "        out = self(images)                    # Generate predictions\n",
        "        loss = F.cross_entropy(out, labels)   # Calculate loss\n",
        "        acc = accuracy(out, labels)           # Calculate accuracy\n",
        "        return {'val_loss': loss.detach(), 'val_acc': acc}\n",
        "        \n",
        "    def validation_epoch_end(self, outputs):\n",
        "        batch_losses = [x['val_loss'] for x in outputs]\n",
        "        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n",
        "        batch_accs = [x['val_acc'] for x in outputs]\n",
        "        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n",
        "        # saving model above 85% accuracy\n",
        "        if epoch_acc.item() > 0.80:\n",
        "            torch.save(model.state_dict(), 'weights/potholes_ident_{}.pth'.format(epoch_acc.item()))\n",
        "        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n",
        "    \n",
        "    def epoch_end(self, epoch, result):\n",
        "        print(\"Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n",
        "            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Model RESNET"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "YJKdO6AIdjYM"
      },
      "outputs": [],
      "source": [
        "class ResNet9(ImageClassificationBase):\n",
        "    def __init__(self, in_channels, num_classes):\n",
        "        super().__init__()\n",
        "        self.norm15 = nn.BatchNorm2d(15)\n",
        "        self.norm30 = nn.BatchNorm2d(30)\n",
        "        self.norm60 = nn.BatchNorm2d(60)\n",
        "        self.norm120 = nn.BatchNorm2d(120)\n",
        "        self.norm200 = nn.BatchNorm2d(200)\n",
        "        self.norm300 = nn.BatchNorm2d(300)\n",
        "        self.norm360 = nn.BatchNorm2d(360)\n",
        "        self.norm512 = nn.BatchNorm2d(512)\n",
        "        #--------------------\n",
        "        self.conv15 = nn.Conv2d(3,15,kernel_size=3,stride=1,padding=1)#15x64x64\n",
        "        self.conv30 = nn.Conv2d(15,30,kernel_size=3,stride=1,padding=1)#30x64x64\n",
        "        self.conv60 = nn.Conv2d(30,60,kernel_size=3,stride=2,padding=1)#60x32x32\n",
        "\n",
        "        self.res60 = nn.Conv2d(60,60,kernel_size=3,stride=1,padding=1)\n",
        "        #---------------\n",
        "        self.conv120a = nn.Conv2d(60,60,kernel_size=3,stride=1,padding=1)\n",
        "        #------------\n",
        "        self.conv200 = nn.Conv2d(60,200,kernel_size=3,stride=1,padding=1)#200x32x32\n",
        "        self.conv200a = nn.Conv2d(200,200,kernel_size=3,stride=2,padding=1)#200x16x16\n",
        "        \n",
        "\n",
        "        self.res200 = nn.Conv2d(200,200,kernel_size=3,stride=1,padding=1)\n",
        "        #------------------\n",
        "        self.conv300 = nn.Conv2d(200,200,kernel_size=3,stride=1,padding=1)\n",
        "        self.conv360 = nn.Conv2d(200,360,kernel_size=3,stride=1,padding=1)#360x16x16\n",
        "        self.conv512 = nn.Conv2d(360,512,kernel_size=3,stride=1,padding=1)#512x16x16\n",
        "\n",
        "        \n",
        "\n",
        "        #===========================#\n",
        "        self.pool = nn.MaxPool2d(2,2)\n",
        "        self.avgpool = nn.AvgPool2d(2,2)\n",
        "        self.flat = nn.Flatten()\n",
        "\n",
        "        self.linear = nn.Linear(512*2*2,2)\n",
        "\n",
        "    def forward(self,xb):\n",
        "      out = torch.relu(self.norm15(self.conv15(xb)))#15x64x64\n",
        "\n",
        "      out = torch.relu(self.norm30(self.conv30(out)))#30x64x64\n",
        "\n",
        "      out = torch.relu(self.norm60(self.conv60(out)))#60x32x32\n",
        "\n",
        "      x = self.res60(out)#120x32x32\n",
        "\n",
        "      out = torch.relu(self.conv120a(out)+x)\n",
        "\n",
        "      out = torch.relu(self.norm200(self.conv200(out)))\n",
        "\n",
        "      out = torch.relu(self.conv200a(out))\n",
        "\n",
        "      \n",
        "\n",
        "      x = self.res200(out)\n",
        "\n",
        "      out = torch.relu(self.conv300(out)+x)\n",
        "\n",
        "      out = torch.relu(self.norm360(self.conv360(out)))\n",
        "\n",
        "      out = torch.relu(self.norm512(self.conv512(out)))\n",
        "\n",
        "      out = self.avgpool(out)#512x8x8\n",
        "      out = self.avgpool(out)#512 4 4\n",
        "      out = self.avgpool(out)#512 2 2\n",
        "      \n",
        "      out = self.flat(out)\n",
        "      out = self.linear(out)\n",
        "\n",
        "      return out\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Clearing GPU cache"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "GM0Hfo5YTyDI"
      },
      "outputs": [],
      "source": [
        "gc.collect()\n",
        "torch.cuda.empty_cache()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Uploading model to GPU"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dos1_Dcx8x99",
        "outputId": "e3565b42-f28a-47ea-a54b-ab720e44d455"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "ResNet9(\n",
              "  (norm15): BatchNorm2d(15, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm30): BatchNorm2d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm60): BatchNorm2d(60, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm120): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm200): BatchNorm2d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm300): BatchNorm2d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm360): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (norm512): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
              "  (conv15): Conv2d(3, 15, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv30): Conv2d(15, 30, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv60): Conv2d(30, 60, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n",
              "  (res60): Conv2d(60, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv120a): Conv2d(60, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv200): Conv2d(60, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv200a): Conv2d(200, 200, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n",
              "  (res200): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv300): Conv2d(200, 200, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv360): Conv2d(200, 360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (conv512): Conv2d(360, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
              "  (flat): Flatten(start_dim=1, end_dim=-1)\n",
              "  (linear): Linear(in_features=2048, out_features=2, bias=True)\n",
              ")"
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = to_device(ResNet9(3,2),device)\n",
        "model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Training Function"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "hYSfr0e6JFkB"
      },
      "outputs": [],
      "source": [
        "@torch.no_grad()\n",
        "def evaluate(model, val_loader):\n",
        "    model.eval()\n",
        "    outputs = [model.validation_step(batch) for batch in val_loader]\n",
        "    return model.validation_epoch_end(outputs)\n",
        "\n",
        "def get_lr(optimizer):\n",
        "    for param_group in optimizer.param_groups:\n",
        "        return param_group['lr']\n",
        "\n",
        "def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n",
        "                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n",
        "    torch.cuda.empty_cache()\n",
        "    history = []\n",
        "    \n",
        "    # Set up cutom optimizer with weight decay\n",
        "    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n",
        "    # Set up one-cycle learning rate scheduler\n",
        "    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n",
        "                                                steps_per_epoch=len(train_loader))\n",
        "    \n",
        "    for epoch in range(epochs):\n",
        "        # Training Phase \n",
        "        model.train()\n",
        "        train_losses = []\n",
        "        lrs = []\n",
        "        for batch in train_loader:\n",
        "            loss = model.training_step(batch)\n",
        "            train_losses.append(loss)\n",
        "            loss.backward()\n",
        "            \n",
        "            # Gradient clipping\n",
        "            if grad_clip: \n",
        "                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n",
        "            \n",
        "            optimizer.step()\n",
        "            optimizer.zero_grad()\n",
        "            \n",
        "            # Record & update learning rate\n",
        "            lrs.append(get_lr(optimizer))\n",
        "            sched.step()\n",
        "        \n",
        "        # Validation phase\n",
        "        result = evaluate(model, val_loader)\n",
        "        result['train_loss'] = torch.stack(train_losses).mean().item()\n",
        "        result['lrs'] = lrs\n",
        "        model.epoch_end(epoch, result)\n",
        "        history.append(result)\n",
        "    return history"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Training parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "BJ8-SyWvIK-B"
      },
      "outputs": [],
      "source": [
        "epochs = 50\n",
        "max_lr = 0.001\n",
        "grad_clip = 0.1\n",
        "weight_decay = 1e-5\n",
        "opt_func = torch.optim.Adam"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Training phase"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Orq_h2XUmbA",
        "outputId": "fe10da1b-49c0-4fe0-9bc4-6ba90ff07fc8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch [0], last_lr: 0.00005, train_loss: 0.7026, val_loss: 0.6781, val_acc: 0.5859\n",
            "Epoch [1], last_lr: 0.00008, train_loss: 0.6729, val_loss: 0.8577, val_acc: 0.4672\n",
            "Epoch [2], last_lr: 0.00013, train_loss: 0.6735, val_loss: 0.9700, val_acc: 0.5141\n",
            "Epoch [3], last_lr: 0.00020, train_loss: 0.6384, val_loss: 0.7313, val_acc: 0.5859\n",
            "Epoch [4], last_lr: 0.00028, train_loss: 0.6130, val_loss: 0.9770, val_acc: 0.6359\n",
            "Epoch [5], last_lr: 0.00037, train_loss: 0.6400, val_loss: 0.8071, val_acc: 0.5781\n",
            "Epoch [6], last_lr: 0.00047, train_loss: 0.6405, val_loss: 2.1135, val_acc: 0.4875\n",
            "Epoch [7], last_lr: 0.00057, train_loss: 0.6468, val_loss: 0.9022, val_acc: 0.5109\n",
            "Epoch [8], last_lr: 0.00067, train_loss: 0.6570, val_loss: 0.6774, val_acc: 0.6531\n",
            "Epoch [9], last_lr: 0.00076, train_loss: 0.6610, val_loss: 1.0311, val_acc: 0.6156\n",
            "Epoch [10], last_lr: 0.00084, train_loss: 0.6793, val_loss: 0.6616, val_acc: 0.6594\n",
            "Epoch [11], last_lr: 0.00091, train_loss: 0.6285, val_loss: 2.2255, val_acc: 0.5938\n",
            "Epoch [12], last_lr: 0.00096, train_loss: 0.6390, val_loss: 0.8620, val_acc: 0.6047\n",
            "Epoch [13], last_lr: 0.00099, train_loss: 0.6323, val_loss: 0.6655, val_acc: 0.5609\n",
            "Epoch [14], last_lr: 0.00100, train_loss: 0.6076, val_loss: 0.8718, val_acc: 0.6438\n",
            "Epoch [15], last_lr: 0.00100, train_loss: 0.6123, val_loss: 0.5923, val_acc: 0.7078\n",
            "Epoch [16], last_lr: 0.00099, train_loss: 0.6083, val_loss: 0.6025, val_acc: 0.6359\n",
            "Epoch [17], last_lr: 0.00098, train_loss: 0.5533, val_loss: 0.5513, val_acc: 0.7500\n",
            "Epoch [18], last_lr: 0.00097, train_loss: 0.5622, val_loss: 0.6232, val_acc: 0.7094\n",
            "Epoch [19], last_lr: 0.00095, train_loss: 0.6430, val_loss: 0.9917, val_acc: 0.5531\n",
            "Epoch [20], last_lr: 0.00093, train_loss: 0.5973, val_loss: 0.6757, val_acc: 0.6484\n",
            "Epoch [21], last_lr: 0.00090, train_loss: 0.6110, val_loss: 0.6766, val_acc: 0.6828\n",
            "Epoch [22], last_lr: 0.00088, train_loss: 0.5592, val_loss: 0.5719, val_acc: 0.7266\n",
            "Epoch [23], last_lr: 0.00085, train_loss: 0.5239, val_loss: 0.6603, val_acc: 0.6656\n",
            "Epoch [24], last_lr: 0.00081, train_loss: 0.5780, val_loss: 0.6557, val_acc: 0.7063\n",
            "Epoch [25], last_lr: 0.00078, train_loss: 0.5844, val_loss: 1.3731, val_acc: 0.4922\n",
            "Epoch [26], last_lr: 0.00074, train_loss: 0.5484, val_loss: 0.6039, val_acc: 0.7219\n",
            "Epoch [27], last_lr: 0.00070, train_loss: 0.5045, val_loss: 0.6731, val_acc: 0.6422\n",
            "Epoch [28], last_lr: 0.00065, train_loss: 0.4830, val_loss: 0.6343, val_acc: 0.7188\n",
            "Epoch [29], last_lr: 0.00061, train_loss: 0.4609, val_loss: 0.7445, val_acc: 0.6125\n",
            "Epoch [30], last_lr: 0.00057, train_loss: 0.4520, val_loss: 0.8913, val_acc: 0.6094\n",
            "Epoch [31], last_lr: 0.00052, train_loss: 0.4596, val_loss: 0.6632, val_acc: 0.6938\n",
            "Epoch [32], last_lr: 0.00048, train_loss: 0.4461, val_loss: 0.7819, val_acc: 0.6031\n",
            "Epoch [33], last_lr: 0.00043, train_loss: 0.4237, val_loss: 0.8224, val_acc: 0.7016\n",
            "Epoch [34], last_lr: 0.00039, train_loss: 0.4074, val_loss: 0.9662, val_acc: 0.5203\n",
            "Epoch [35], last_lr: 0.00035, train_loss: 0.3909, val_loss: 0.7733, val_acc: 0.6906\n",
            "Epoch [36], last_lr: 0.00030, train_loss: 0.3534, val_loss: 0.7037, val_acc: 0.7172\n",
            "Epoch [37], last_lr: 0.00026, train_loss: 0.3640, val_loss: 0.8029, val_acc: 0.6281\n",
            "Epoch [38], last_lr: 0.00022, train_loss: 0.3964, val_loss: 0.9239, val_acc: 0.6344\n",
            "Epoch [39], last_lr: 0.00019, train_loss: 0.3270, val_loss: 0.8122, val_acc: 0.7125\n",
            "Epoch [40], last_lr: 0.00015, train_loss: 0.2820, val_loss: 0.9276, val_acc: 0.5984\n",
            "Epoch [41], last_lr: 0.00012, train_loss: 0.2822, val_loss: 0.7998, val_acc: 0.6797\n",
            "Epoch [42], last_lr: 0.00010, train_loss: 0.2744, val_loss: 0.7983, val_acc: 0.7312\n",
            "Epoch [43], last_lr: 0.00007, train_loss: 0.2381, val_loss: 0.8234, val_acc: 0.7219\n",
            "Epoch [44], last_lr: 0.00005, train_loss: 0.2527, val_loss: 0.8542, val_acc: 0.6672\n",
            "Epoch [45], last_lr: 0.00003, train_loss: 0.2302, val_loss: 0.8444, val_acc: 0.7016\n",
            "Epoch [46], last_lr: 0.00002, train_loss: 0.2137, val_loss: 0.8503, val_acc: 0.7016\n",
            "Epoch [47], last_lr: 0.00001, train_loss: 0.2264, val_loss: 0.8613, val_acc: 0.7141\n",
            "Epoch [48], last_lr: 0.00000, train_loss: 0.2274, val_loss: 0.8650, val_acc: 0.7141\n",
            "Epoch [49], last_lr: 0.00000, train_loss: 0.2156, val_loss: 0.8577, val_acc: 0.7141\n"
          ]
        }
      ],
      "source": [
        "ret_data = fit_one_cycle(epochs,max_lr,model,train_dl,test_dl,weight_decay,grad_clip,opt_func)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "torch.save(model.state_dict(),\"pothole_thresh71.pth\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Evaluate your own validation dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def validate_results(path_to_validation_data):\n",
        "    val_ds = ImageFolder(path_to_validation_data,test_tfms)\n",
        "    val_dl = DataLoader(val_ds,batch_size=32,shuffle=True,num_workers=3,pin_memory=True)\n",
        "    model = ResNet9(3,10)\n",
        "    model.load_state_dict(torch.load(\"imp/potholes_ident_0.9468749761581421.pth\"))\n",
        "    results = evaluate(model,val_dl)\n",
        "    return results\n",
        "\n",
        "print(validate_results(\"data/test\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Functions for plotting graphs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def plot_accuracies(history):\n",
        "  accuracies = [x['val_acc'] for x in history]\n",
        "  plt.plot(accuracies, '-x')\n",
        "  plt.xlabel('epoch')\n",
        "  plt.ylabel('accuracy')\n",
        "  plt.title('Acc vs Epochs')\n",
        "\n",
        "def plot_loss(history):\n",
        "  loss = [x['val_loss'] for x in history]\n",
        "  plt.plot(loss, '-x')\n",
        "  plt.xlabel('epoch')\n",
        "  plt.ylabel('loss')\n",
        "  plt.title('Loss vs Epochs')\n",
        "\n",
        "def plot_lr(history):\n",
        "  lr = [x['lrs'] for x in history]\n",
        "  plt.plot(lr, '-x')\n",
        "  plt.xlabel('epoch')\n",
        "  plt.ylabel('learning_rates')\n",
        "  plt.title('Learning_rates vs Epochs')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plot_loss(ret_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plot_accuracies(ret_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "plot_lr(ret_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Function for predicting Image"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def predict_image(img, model):\n",
        "    # Convert to a batch of 1\n",
        "    xb = to_device(img.unsqueeze(0), device)\n",
        "    # Get predictions from model\n",
        "    yb = model(xb)\n",
        "    # Pick index with highest probability\n",
        "    a, preds  = torch.max(yb, dim=1)\n",
        "    # Retrieve the class label\n",
        "    return train_ds.classes[preds[0].item()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "img, label = test_ds[100]\n",
        "print(img.shape)\n",
        "plt.imshow(img.permute(1, 2, 0))\n",
        "print('Label:', train_ds.classes[label], ', Predicted:', predict_image(img, model))"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "name": "rnn_simpsons.ipynb",
      "provenance": []
    },
    "interpreter": {
      "hash": "ac59ebe37160ed0dfa835113d9b8498d9f09ceb179beaac4002f036b9467c963"
    },
    "kernelspec": {
      "display_name": "Python 3.9.6 64-bit",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.2"
    },
    "orig_nbformat": 4
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
